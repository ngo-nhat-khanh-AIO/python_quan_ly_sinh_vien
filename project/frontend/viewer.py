import streamlit as st
import requests
import pandas as pd
import plotly.express as px
from config import API_URL


class Viewer:
    def __init__(self):
        self.api_url = API_URL

    def get_sinh_vien_data(self):
        try:
            response = requests.get(f"{self.api_url}/sinh-vien")
            return response.json()
        except:
            st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi API")
            return []

    def get_mon_hoc_data(self):
        try:
            response = requests.get(f"{self.api_url}/mon-hoc")
            return response.json()
        except:
            st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi API")
            return []

    def get_ket_qua_data(self, mssv):
        try:
            response = requests.get(f"{self.api_url}/ket-qua/sinh-vien/{mssv}")
            return response.json()
        except:
            st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi API")
            return []

    def create_sinh_vien(self, sinh_vien_data):
        response = requests.post(
            f"{self.api_url}/sinh-vien",
            json=sinh_vien_data
        )
        return response.json()

    def NhapDuLieuSinhVien(self):
        st.subheader("üìù Qu·∫£n l√Ω th√¥ng tin Sinh vi√™n")

        tab1, tab2 = st.tabs(["Danh s√°ch sinh vi√™n", "Th√™m sinh vi√™n m·ªõi"])

        with tab1:
            # Hi·ªÉn th·ªã danh s√°ch sinh vi√™n v·ªõi kh·∫£ nƒÉng ch·ªânh s·ª≠a
            sinh_vien_data = self.get_sinh_vien_data()
            if sinh_vien_data:
                df = pd.DataFrame(sinh_vien_data)
                edited_df = st.data_editor(
                    df,
                    column_config={
                        "ten": st.column_config.TextColumn(
                            "H·ªç v√† t√™n",
                            width="large",
                        ),
                        "email": st.column_config.TextColumn(
                            "Email",
                            width="medium",
                        ),
                        "sdt": st.column_config.TextColumn(
                            "S·ªë ƒëi·ªán tho·∫°i",
                            width="medium",
                        ),
                        "gioitinh": st.column_config.SelectboxColumn(
                            "Gi·ªõi t√≠nh",
                            options=["Nam", "N·ªØ"],
                            width="small",
                        ),
                        "mssv": st.column_config.TextColumn(
                            "MSSV",
                            width="small",
                            disabled=True,
                        ),
                    },
                    hide_index=True,
                    num_rows="dynamic",
                    key="danh_sach_sinh_vien"
                )

                col1, col2 = st.columns(2)
                with col1:
                    if st.button("L∆∞u thay ƒë·ªïi", type="primary"):
                        try:
                            for _, row in edited_df.iterrows():
                                response = requests.put(
                                    f"{self.api_url}/sinh-vien/{row['mssv']}",
                                    json={
                                        "ten": row['ten'],
                                        "email": row['email'],
                                        "sdt": row['sdt'],
                                        "gioitinh": row['gioitinh'],
                                        "mssv": row['mssv']
                                    }
                                )
                            st.success(
                                "ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin sinh vi√™n th√†nh c√¥ng!")
                            st.rerun()
                        except Exception as e:
                            st.error(f"L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin: {str(e)}")
            else:
                st.info("Ch∆∞a c√≥ d·ªØ li·ªáu sinh vi√™n")

        with tab2:
            # Form th√™m sinh vi√™n m·ªõi
            with st.form("them_sinh_vien"):
                ten = st.text_input("H·ªç v√† t√™n")
                col1, col2 = st.columns(2)
                with col1:
                    email = st.text_input("Email")
                    gioitinh = st.selectbox("Gi·ªõi t√≠nh", ["Nam", "N·ªØ"])
                with col2:
                    sdt = st.text_input("S·ªë ƒëi·ªán tho·∫°i")
                    mssv = st.text_input("M√£ s·ªë sinh vi√™n")

                submitted = st.form_submit_button("Th√™m sinh vi√™n")
                if submitted:
                    if not ten or not mssv:
                        st.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n v√† MSSV!")
                    else:
                        sinh_vien_data = {
                            "ten": ten,
                            "email": email,
                            "sdt": sdt,
                            "gioitinh": gioitinh,
                            "mssv": mssv
                        }
                        try:
                            # Ki·ªÉm tra MSSV ƒë√£ t·ªìn t·∫°i ch∆∞a
                            existing_sv = [
                                sv for sv in self.get_sinh_vien_data() if sv['mssv'] == mssv]
                            if existing_sv:
                                st.error(f"MSSV {mssv} ƒë√£ t·ªìn t·∫°i!")
                            else:
                                response = self.create_sinh_vien(
                                    sinh_vien_data)
                                if response:
                                    st.success("ƒê√£ th√™m sinh vi√™n th√†nh c√¥ng!")
                                    st.rerun()
                        except Exception as e:
                            st.error(f"L·ªói khi th√™m sinh vi√™n: {str(e)}")

    def SuaThongTinSinhVien(self):
        sinh_vien_data = self.get_sinh_vien_data()
        if not sinh_vien_data:
            st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu sinh vi√™n")
            return

        # Ch·ªçn sinh vi√™n ƒë·ªÉ s·ª≠a
        selected_sv = st.selectbox(
            "Ch·ªçn sinh vi√™n c·∫ßn s·ª≠a",
            sinh_vien_data,
            format_func=lambda x: f"{x['ten']} ({x['mssv']})"
        )

        if selected_sv:
            with st.form("sua_sinh_vien"):
                col1, col2 = st.columns(2)
                with col1:
                    ten = st.text_input("H·ªç v√† t√™n", value=selected_sv['ten'])
                    email = st.text_input("Email", value=selected_sv['email'])
                    gioitinh = st.selectbox("Gi·ªõi t√≠nh", ["Nam", "N·ªØ"],
                                            index=0 if selected_sv['gioitinh'] == "Nam" else 1)
                with col2:
                    sdt = st.text_input(
                        "S·ªë ƒëi·ªán tho·∫°i", value=selected_sv['sdt'])
                    mssv = st.text_input(
                        "M√£ s·ªë sinh vi√™n", value=selected_sv['mssv'], disabled=True)

                submitted = st.form_submit_button("C·∫≠p nh·∫≠t th√¥ng tin")
                if submitted:
                    if not ten:
                        st.error("Vui l√≤ng nh·∫≠p h·ªç t√™n!")
                    else:
                        sinh_vien_data = {
                            "ten": ten,
                            "email": email,
                            "sdt": sdt,
                            "gioitinh": gioitinh,
                            "mssv": mssv
                        }
                        try:
                            response = requests.put(
                                f"{self.api_url}/sinh-vien/{mssv}",
                                json=sinh_vien_data
                            )
                            if response.status_code == 200:
                                st.success(
                                    "ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin sinh vi√™n th√†nh c√¥ng!")
                                st.rerun()
                            else:
                                st.error(
                                    "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin sinh vi√™n")
                        except Exception as e:
                            st.error(f"L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin: {str(e)}")

    def XemKetQuaHocTap(self):
        st.subheader("üìä K·∫øt Qu·∫£ H·ªçc T·∫≠p")
        self.XemDiem()

    def XemDiem(self):
        sinh_vien_data = self.get_sinh_vien_data()
        if not sinh_vien_data:
            st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu sinh vi√™n")
            return

        # L·∫•y t·∫•t c·∫£ k·∫øt qu·∫£ h·ªçc t·∫≠p
        try:
            response = requests.get(f"{self.api_url}/ket-qua")
            ket_qua_data = response.json()
        except:
            st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu k·∫øt qu·∫£")
            return

        # Ch·ªçn sinh vi√™n ƒë·ªÉ xem ƒëi·ªÉm
        selected_sv = st.selectbox(
            "Ch·ªçn sinh vi√™n ƒë·ªÉ xem ƒëi·ªÉm",
            sinh_vien_data,
            format_func=lambda x: f"{x['ten']} ({x['mssv']})"
        )

        if selected_sv:
            try:
                # L·∫•y danh s√°ch m√¥n h·ªçc
                mon_hoc_data = self.get_mon_hoc_data()

                # T·∫°o DataFrame v·ªõi t·∫•t c·∫£ m√¥n h·ªçc, m·∫∑c ƒë·ªãnh ƒëi·ªÉm = 0
                df_all = pd.DataFrame([{
                    'ma_mon_hoc': mh['ma_mon_hoc'],
                    'ten_mon_hoc': mh['ten_mon_hoc'],
                    'tin_chi': mh['tin_chi'],
                    'diem_qua_trinh': 0.0,
                    'diem_kiem_tra': 0.0,
                    'diem_thi': 0.0,
                    'diem_trung_binh': 0.0,
                    'diem_chu': 'F',
                    'gpa': 0.0
                } for mh in mon_hoc_data])

                # C·∫≠p nh·∫≠t ƒëi·ªÉm cho c√°c m√¥n ƒë√£ c√≥ ƒëi·ªÉm
                diem_sv = [kq for kq in ket_qua_data if kq['mssv'] == selected_sv['mssv']]
                if diem_sv:
                    for diem in diem_sv:
                        mask = df_all['ma_mon_hoc'] == diem['ma_mon_hoc']
                        df_all.loc[mask, [
                            'diem_qua_trinh',
                            'diem_kiem_tra',
                            'diem_thi'
                        ]] = [
                            diem['diem_qua_trinh'],
                            diem['diem_kiem_tra'],
                            diem['diem_thi']
                        ]
                        # T√≠nh ƒëi·ªÉm trung b√¨nh
                        diem_tb = (diem['diem_qua_trinh'] * 0.2 +
                                  diem['diem_kiem_tra'] * 0.3 +
                                  diem['diem_thi'] * 0.5)
                        df_all.loc[mask, 'diem_trung_binh'] = round(diem_tb, 2)

                        # T√≠nh ƒëi·ªÉm ch·ªØ v√† GPA
                        if diem_tb >= 9.0:
                            diem_chu, gpa = 'A+', 4.0
                        elif diem_tb >= 8.5:
                            diem_chu, gpa = 'A', 3.7
                        elif diem_tb >= 8.0:
                            diem_chu, gpa = 'B+', 3.5
                        elif diem_tb >= 7.0:
                            diem_chu, gpa = 'B', 3.0
                        elif diem_tb >= 6.5:
                            diem_chu, gpa = 'C+', 2.5
                        elif diem_tb >= 5.5:
                            diem_chu, gpa = 'C', 2.0
                        elif diem_tb >= 5.0:
                            diem_chu, gpa = 'D+', 1.5
                        elif diem_tb >= 4.0:
                            diem_chu, gpa = 'D', 1.0
                        else:
                            diem_chu, gpa = 'F', 0.0

                        df_all.loc[mask, ['diem_chu', 'gpa']] = [diem_chu, gpa]

                # T√≠nh GPA t·ªïng v√† t·ªïng t√≠n ch·ªâ
                df_co_diem = df_all[df_all['gpa'] > 0]
                tong_tin_chi = df_co_diem['tin_chi'].sum()
                gpa_tong = round((df_co_diem['gpa'] * df_co_diem['tin_chi']).sum() / 
                                tong_tin_chi, 2) if tong_tin_chi > 0 else 0.0

                # Hi·ªÉn th·ªã th√¥ng tin t·ªïng qu√°t
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("GPA T·ªïng", f"{gpa_tong:.2f}/4.0")
                with col2:
                    st.metric("T·ªïng s·ªë t√≠n ch·ªâ ƒë√£ h·ªçc", tong_tin_chi)
                with col3:
                    xep_loai = "Xu·∫•t s·∫Øc" if gpa_tong >= 3.7 else \
                              "Gi·ªèi" if gpa_tong >= 3.5 else \
                              "Kh√°" if gpa_tong >= 3.0 else \
                              "Trung b√¨nh" if gpa_tong >= 2.0 else "Y·∫øu"
                    st.metric("X·∫øp lo·∫°i", xep_loai)

                # Hi·ªÉn th·ªã b·∫£ng ƒëi·ªÉm chi ti·∫øt
                st.subheader("B·∫£ng ƒëi·ªÉm chi ti·∫øt")
                st.dataframe(
                    df_all,
                    column_config={
                        "ten_mon_hoc": "T√™n m√¥n h·ªçc",
                        "tin_chi": "S·ªë t√≠n ch·ªâ",
                        "diem_qua_trinh": "ƒêi·ªÉm qu√° tr√¨nh",
                        "diem_kiem_tra": "ƒêi·ªÉm ki·ªÉm tra",
                        "diem_thi": "ƒêi·ªÉm thi",
                        "diem_trung_binh": st.column_config.NumberColumn(
                            "ƒêi·ªÉm TB",
                            format="%.2f"
                        ),
                        "diem_chu": "ƒêi·ªÉm ch·ªØ",
                        "gpa": st.column_config.NumberColumn(
                            "GPA",
                            format="%.2f"
                        )
                    },
                    hide_index=True,
                    use_container_width=True
                )

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ƒëi·ªÉm
                if not df_co_diem.empty:
                    st.subheader("Bi·ªÉu ƒë·ªì ƒëi·ªÉm")
                    fig = px.bar(
                        df_co_diem,
                        x='gpa',
                        y='ten_mon_hoc',
                        orientation='h',
                        title='GPA theo m√¥n h·ªçc'
                    )
                    fig.update_layout(
                        height=400,
                        showlegend=False,
                        yaxis={'categoryorder': 'total ascending'},
                        xaxis_title="GPA (thang 4)",
                        yaxis_title="",
                        title_x=0.5
                    )
                    fig.update_traces(
                        texttemplate='%{x:.2f}',
                        textposition='outside'
                    )
                    st.plotly_chart(fig, use_container_width=True)

            except Exception as e:
                st.error(f"C√≥ l·ªói x·∫£y ra: {str(e)}")

    def NhapDiem(self):
        sinh_vien_data = self.get_sinh_vien_data()
        mon_hoc_data = self.get_mon_hoc_data()

        if not sinh_vien_data or not mon_hoc_data:
            st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu")
            return

        # Ch·ªçn sinh vi√™n
        selected_sv = st.selectbox(
            "Ch·ªçn sinh vi√™n",
            sinh_vien_data,
            format_func=lambda x: f"{x['ten']} ({x['mssv']})",
            key="nhap_diem_sv"
        )

        if selected_sv:
            # Form nh·∫≠p ƒëi·ªÉm
            with st.form("nhap_diem"):
                # Ch·ªçn m√¥n h·ªçc
                selected_mh = st.selectbox(
                    "Ch·ªçn m√¥n h·ªçc",
                    mon_hoc_data,
                    format_func=lambda x: f"{
                        x['ten_mon_hoc']} ({x['ma_mon_hoc']})"
                )

                col1, col2, col3 = st.columns(3)
                with col1:
                    diem_qt = st.number_input(
                        "ƒêi·ªÉm qu√° tr√¨nh",
                        min_value=0.0,
                        max_value=10.0,
                        step=0.1
                    )
                with col2:
                    diem_kt = st.number_input(
                        "ƒêi·ªÉm ki·ªÉm tra",
                        min_value=0.0,
                        max_value=10.0,
                        step=0.1
                    )
                with col3:
                    diem_thi = st.number_input(
                        "ƒêi·ªÉm thi",
                        min_value=0.0,
                        max_value=10.0,
                        step=0.1
                    )

                submitted = st.form_submit_button("L∆∞u ƒëi·ªÉm")

                if submitted:
                    try:
                        # Ki·ªÉm tra ƒëi·ªÉm h·ª£p l·ªá
                        if not (0 <= diem_qt <= 10 and 0 <= diem_kt <= 10 and 0 <= diem_thi <= 10):
                            st.error("ƒêi·ªÉm ph·∫£i n·∫±m trong kho·∫£ng 0-10")
                            return

                        # T·∫°o d·ªØ li·ªáu ƒëi·ªÉm
                        ket_qua_data = {
                            "mssv": selected_sv["mssv"],
                            "ma_mon_hoc": selected_mh["ma_mon_hoc"],
                            "diem_qua_trinh": diem_qt,
                            "diem_kiem_tra": diem_kt,
                            "diem_thi": diem_thi
                        }

                        # G·ª≠i request t·∫°o/c·∫≠p nh·∫≠t ƒëi·ªÉm
                        response = requests.put(
                            f"{self.api_url}/ket-qua",
                            json=ket_qua_data
                        )

                        if response.status_code == 200:
                            st.success(f"ƒê√£ l∆∞u ƒëi·ªÉm m√¥n {selected_mh['ten_mon_hoc']} cho sinh vi√™n {
                                       selected_sv['ten']}")
                            st.rerun()
                        else:
                            st.error("Kh√¥ng th·ªÉ l∆∞u ƒëi·ªÉm. Vui l√≤ng th·ª≠ l·∫°i")

                    except Exception as e:
                        st.error(f"C√≥ l·ªói x·∫£y ra: {str(e)}")
